<!DOCTYPE html>
<html dir="ltr" class="client-js" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>PPU registers - Nesdev wiki</title>
<meta charset="UTF-8">
<meta name="generator" content="MediaWiki 1.20.2">
<link rel="shortcut icon" href="http://wiki.nesdev.com/favicon.ico">
<link rel="search" type="application/opensearchdescription+xml" href="http://wiki.nesdev.com/w/opensearch_desc.php" title="Nesdev wiki (en)">
<link rel="EditURI" type="application/rsd+xml" href="http://wiki.nesdev.com/w/api.php?action=rsd">
<link rel="alternate" type="application/atom+xml" title="Nesdev wiki Atom feed" href="http://wiki.nesdev.com/w/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="stylesheet" href="PPU%20registers%20-%20Nesdev%20wiki_files/load_002.css">
<!--[if IE 6]><link rel="stylesheet" href="/w/skins/monobook/IE60Fixes.css?303" media="screen" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" href="/w/skins/monobook/IE70Fixes.css?303" media="screen" /><![endif]--><style>.mw-collapsible-toggle{float:right} li .mw-collapsible-toggle{float:none} .mw-collapsible-toggle-li{list-style:none}
/* cache key: nesdev_wiki-mw1_:resourceloader:filter:minify-css:7:4250852ed2349a0d4d0fc6509a3e7d4c */.suggestions{overflow:hidden;position:absolute;top:0;left:0;width:0;border:none;z-index:1099;padding:0;margin:-1px -1px 0 0} html > body .suggestions{margin:-1px 0 0 0}.suggestions-special{position:relative;background-color:white;cursor:pointer;border:solid 1px #aaaaaa;padding:0;margin:0;margin-top:-2px;display:none;padding:0.25em 0.25em;line-height:1.25em}.suggestions-results{background-color:white;cursor:pointer;border:solid 1px #aaaaaa;padding:0;margin:0}.suggestions-result{color:black;margin:0;line-height:1.5em;padding:0.01em 0.25em;text-align:left}.suggestions-result-current{background-color:#4C59A6;color:white}.suggestions-special .special-label{color:gray;text-align:left}.suggestions-special .special-query{color:black;font-style:italic;text-align:left}.suggestions-special .special-hover{background-color:silver}.suggestions-result-current .special-label,.suggestions-result-current .special-query{color:white}.autoellipsis-matched,.highlight{font-weight:bold}
/* cache key: nesdev_wiki-mw1_:resourceloader:filter:minify-css:7:9780324491b653a3780e2d029bdc140c */</style><meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="PPU%20registers%20-%20Nesdev%20wiki_files/load.css">
<style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: nesdev_wiki-mw1_:resourceloader:filter:minify-css:7:b2ff0e5460847bfbc2a67ca6bf6f3969 */</style>

<script src="PPU%20registers%20-%20Nesdev%20wiki_files/load_004.php"></script><script src="PPU%20registers%20-%20Nesdev%20wiki_files/load_005.php"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"PPU_registers","wgTitle":"PPU registers","wgCurRevisionId":7219,"wgArticleId":11,"wgIsArticle":true,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"PPU_registers","wgRestrictionEdit":[],"wgRestrictionMove":[]});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"externaldiff":0,"externaleditor":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"quickbar":5,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"showjumplinks":1,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"monobook","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,
"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"variant":"en","language":"en","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false});;},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","watchToken":false});;},{},{});
/* cache key: nesdev_wiki-mw1_:resourceloader:filter:minify-js:7:c89fc005766e312c555f83b307d08d63 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax"]);
}</script><script type="text/javascript" src="PPU%20registers%20-%20Nesdev%20wiki_files/load_003.php"></script><link href="PPU%20registers%20-%20Nesdev%20wiki_files/FF2Fixes.css" rel="stylesheet" type="text/css">
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-PPU_registers skin-monobook action-view">
<div id="globalWrapper">
<div id="column-content"><div id="content" class="mw-body-primary">
	<a id="top"></a>
	
	<h1 id="firstHeading" class="firstHeading"><span dir="auto">PPU registers</span></h1>
	<div id="bodyContent" class="mw-body">
		<div id="siteSub">From Nesdev wiki</div>
		<div id="contentSub"></div>
		<div id="jump-to-nav" class="mw-jump">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>
		<!-- start content -->
<div id="mw-content-text" dir="ltr" class="mw-content-ltr" lang="en"><p>The
 PPU exposes eight memory-mapped registers to the CPU. These nominally 
sit at $2000 through $2007 in the CPU's address space, but because 
they're incompletely decoded, they're <a href="http://wiki.nesdev.com/w/index.php/Mirroring" title="Mirroring">mirrored</a> in every 8 bytes from $2008 through $3FFF, so a write to $3456 is the same as a write to $2006.
</p><p>Immediately after powerup, the PPU isn't necessarily in a usable state.
The program needs to do a few things to get it going; see <a href="http://wiki.nesdev.com/w/index.php/PPU_power_up_state" title="PPU power up state">PPU power up state</a> and <a href="http://wiki.nesdev.com/w/index.php/Init_code" title="Init code">Init code</a>. 
</p><p><br>
</p>
<table id="toc" class="toc"><tbody><tr><td><div id="toctitle"><h2>Contents</h2><span class="toctoggle">&nbsp;[<a href="#" class="internal" id="togglelink">hide</a>]&nbsp;</span></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Controller_.28.242000.29_.3E_write"><span class="tocnumber">1</span> <span class="toctext">Controller ($2000) &gt; write</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Master.2Fslave_mode_and_the_EXT_pins"><span class="tocnumber">1.1</span> <span class="toctext">Master/slave mode and the EXT pins</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Bit_0_bus_conflict"><span class="tocnumber">1.2</span> <span class="toctext">Bit 0 bus conflict</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-4"><a href="#Mask_.28.242001.29_.3E_write"><span class="tocnumber">2</span> <span class="toctext">Mask ($2001) &gt; write</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Status_.28.242002.29_.3C_read"><span class="tocnumber">3</span> <span class="toctext">Status ($2002) &lt; read</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#Notes"><span class="tocnumber">3.1</span> <span class="toctext">Notes</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="#OAM_address_.28.242003.29_.3E_write"><span class="tocnumber">4</span> <span class="toctext">OAM address ($2003) &gt; write</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="#Obscure_details_of_OAMADDR"><span class="tocnumber">4.1</span> <span class="toctext">Obscure details of OAMADDR</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="#OAM_data_.28.242004.29_.3C.3E_read.2Fwrite"><span class="tocnumber">5</span> <span class="toctext">OAM data ($2004) &lt;&gt; read/write</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Scroll_.28.242005.29_.3E.3E_write_x2"><span class="tocnumber">6</span> <span class="toctext">Scroll ($2005) &gt;&gt; write x2</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="#Address_.28.242006.29_.3E.3E_write_x2"><span class="tocnumber">7</span> <span class="toctext">Address ($2006) &gt;&gt; write x2</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="#note"><span class="tocnumber">7.1</span> <span class="toctext">note</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="#Data_.28.242007.29_.3C.3E_read.2Fwrite"><span class="tocnumber">8</span> <span class="toctext">Data ($2007) &lt;&gt; read/write</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="#The_PPUDATA_read_buffer_.28post-fetch.29"><span class="tocnumber">8.1</span> <span class="toctext">The PPUDATA read buffer (post-fetch)</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table>
<p><br>
</p>
<h3> <span class="mw-headline" id="Controller_.28.242000.29_.3E_write"> Controller ($2000) &gt; write </span></h3>
<p>Is often referred as PPUCTRL.
</p><p>Various flags controlling PPU operation
</p>
<pre>7654 3210
|||| ||||
|||| ||++- Base nametable address
|||| ||    (0 = $2000; 1 = $2400; 2 = $2800; 3 = $2C00)
|||| |+--- VRAM address increment per CPU read/write of PPUDATA
|||| |     (0: add 1, going across; 1: add 32, going down)
|||| +---- Sprite pattern table address for 8x8 sprites
||||       (0: $0000; 1: $1000; ignored in 8x16 mode)
|||+------ Background pattern table address (0: $0000; 1: $1000)
||+------- Sprite size (0: 8x8; 1: 8x16)
|+-------- PPU master/slave select
|          (0: read backdrop from EXT pins; 1: output color on EXT pins)
+--------- Generate an <a href="http://wiki.nesdev.com/w/index.php/NMI" title="NMI">NMI</a> at the start of the
           <a href="http://en.wikipedia.org/wiki/Vertical_blanking_interval" class="extiw" title="wikipedia:Vertical blanking interval">vertical blanking interval</a> (0: off; 1: on)
</pre>
<p>Equivalently, bits 0 and 1 are the most significant bit of the scrolling coordinates (see <a href="http://wiki.nesdev.com/w/index.php/PPU_nametables" title="PPU nametables">Nametables</a> and <a href="#Scroll_.28.242005.29_.3E.3E_write_x2">PPU scroll</a>):
</p>
<pre>7654 3210
       ||
       |+- 1: Add 256 to the X scroll position
       +-- 1: Add 240 to the Y scroll position
</pre>
<p>Another way of seeing the explanation above is that when you reach 
the end of a nametable, you must switch to the next one, hence, changing
 the nametable address.
</p><p><a href="http://wiki.nesdev.com/w/index.php/PPU_power_up_state" title="PPU power up state">After power/reset</a>, writes to this register are ignored for about 30000 cycles.
</p>
<h4> <span class="mw-headline" id="Master.2Fslave_mode_and_the_EXT_pins"> Master/slave mode and the EXT pins </span></h4>
<p>When bit 6 of $2000 is clear (the usual case), the PPU gets the <a href="http://wiki.nesdev.com/w/index.php/PPU_palettes" title="PPU palettes">palette index</a>
 for the background color from the EXT pins. The stock NES grounds these
 pins, making palette index 0 the background color as expected. A 
secondary picture generator connected to the EXT pins would be able to 
replace the background with a different image using colors from the 
background palette, which could be used e.g. to implement parallax 
scrolling.
</p><p>Setting bit 6 causes the PPU to output the lower four bits of the
 palette memory index on the EXT pins for each pixel (in addition to 
normal image drawing) - since only four bits are output, background and 
sprite pixels can't normally be distinguished this way. As the EXT pins 
are grounded on an unmodified NES, setting bit 6 is discouraged as it 
could potentially damage the chip whenever it outputs a non-zero pixel 
value (due to it effectively shorting Vcc and GND together). Looking at 
the relevant circuitry in <a href="http://wiki.nesdev.com/w/index.php/Visual_2C02" title="Visual 2C02">Visual 2C02</a>, it appears that the <a href="http://wiki.nesdev.com/w/index.php/PPU_palettes" title="PPU palettes">background palette hack</a> would not be functional for output from the EXT pins; they would always output index 0 for the background color.
</p>
<h4> <span class="mw-headline" id="Bit_0_bus_conflict"> Bit 0 bus conflict </span></h4>
<p>Be very careful when writing to this register outside vertical 
blanking if you are using vertical mirroring (horizontal arrangement) or
 4-screen VRAM.
For specific CPU-PPU alignments, <a rel="nofollow" class="external text" href="http://forums.nesdev.com/viewtopic.php?p=112424#p112424">a write near the end of a visible scanline</a>
 may cause only the next scanline to be erroneously drawn from the left 
nametable.
This can cause a visible glitch.
Worse, it can theoretically cause a sprite 0 hit to fail, which may 
crash a game using a sprite 0 spin loop that's not resilient.
</p><p>Only writes at the exact moment between active picture and 
horizontal blanking cause this glitch; well-timed mid-scanline writes do
 not, nor do writes that land well within horizontal blanking.
The glitch has no effect in horizontal or one-screen mirroring.
It also does not appear if bit 0 of the written value is 0; this always 
correctly sets the left nametable.
</p><p>This produces an occasionally <a href="http://wiki.nesdev.com/w/index.php/Game_bugs" title="Game bugs">visible glitch</a> in <i>Super Mario Bros.</i>
 when the program writes to PPUCTRL at the end of game logic.
It appears to be turning NMI off during game logic and then turning NMI 
back on once the game logic has finished in order to prevent the NMI 
handler from being called again before the game logic finishes.
To work around this in new productions, have your game logic set a flag 
that your NMI handler checks.
</p>
<h3> <span class="mw-headline" id="Mask_.28.242001.29_.3E_write"> Mask ($2001) &gt; write </span></h3>
<p>Is often referred as PPUMASK.
</p><p>This register controls screen enable, masking, and intensity.
Write $00 here if you want to turn rendering off so that you can update 
the pattern tables or nametables outside of vertical blanking.
Write $1E when you're done to turn rendering back on.
The other bits do special effects with the colors.
</p>
<pre>76543210
||||||||
|||||||+- Grayscale (0: normal color; 1: produce a monochrome display)
||||||+-- 1: Show background in leftmost 8 pixels of screen; 0: Hide
|||||+--- 1: Show sprites in leftmost 8 pixels of screen; 0: Hide
||||+---- 1: Show background
|||+----- 1: Show sprites
||+------ Intensify reds (and darken other colors)
|+------- Intensify greens (and darken other colors)
+-------- Intensify blues (and darken other colors)
</pre>
<p>When grayscale is turned on, the PPU ignores the lower nibble of each
 palette entry.
This causes a bitwise AND with $30 on any value read from PPU 
$3F00-$3FFF, both on the display and through PPUDATA ($2007). Writes to 
the palette through PPUDATA are not affected.
</p><p>Hiding the leftmost 8 pixels is often done to cover artifacts from using horizontal scrolling with horizontal <a href="http://wiki.nesdev.com/w/index.php/Mirroring" title="Mirroring">mirroring</a>.
Sprite 0 hit does not trigger in any area where the background or 
sprites are hidden.
If both the background and sprites are hidden, the PPU enters "forced 
blank" state, where it stops rendering and releases control of the 
address and data bus.
</p><p><a href="http://wiki.nesdev.com/w/index.php/NTSC_video" title="NTSC video">NTSC video</a> describes how bits D7-D5 (the "emphasis" bits or the "tint" bits) work on NTSC and PAL PPUs.
Each bit's color have been confirmed on an NES; some older documents have them wrong.
<b>Caution:</b> The RGB PPU (used on PlayChoice, Famicom Titler, and a 
couple Japanese TVs) treats the tint bits differently: instead of 
darkening other RGB components, it forces one RGB component to maximum 
brightness.
<a href="http://wiki.nesdev.com/w/index.php/Colour-emphasis_games" title="Colour-emphasis games">A few games</a>, which set all three tint bits to darken all colors, are unplayable on these PPUs.
In either case, the tint bits are applied after grayscale, which means they still tint the gray image.
</p>
<h3> <span class="mw-headline" id="Status_.28.242002.29_.3C_read"> Status ($2002) &lt; read </span></h3>
<p>Is often referred as PPUSTATUS.
</p><p>This register reflects the state of various functions inside the PPU.
It is often used for determining timing.
<span id="Sprite_0">To determine when the PPU has reached a given pixel of the screen, put an opaque pixel of sprite 0 there.</span>
</p>
<pre>7654 3210
|||| ||||
|||+-++++- Least significant bits previously written into a PPU register
|||        (due to register not being updated for this address)
||+------- Sprite overflow. The intent was for this flag to be set
||         whenever more than eight sprites appear on a scanline, but a
||         hardware bug causes the actual behavior to be more complicated
||         and generate false positives as well as false negatives; see
||         <a href="http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation" title="PPU sprite evaluation">PPU sprite evaluation</a>. This flag is set during sprite
||         evaluation and cleared at dot 1 (the second dot) of the
||         pre-render line.
|+-------- Sprite 0 Hit.  Set when a nonzero pixel of sprite 0 overlaps
|          a nonzero background pixel; cleared at dot 1 of the pre-render
|          line.  Used for raster timing.
+--------- Vertical blank has started (0: not in VBLANK; 1: in VBLANK).
           Set at dot 1 of line 241 (the line *after* the post-render
           line); cleared after reading $2002 and at dot 1 of the
           pre-render line.
</pre>
<h4> <span class="mw-headline" id="Notes"> Notes </span></h4>
<ul><li> Reading the status register will clear D7 mentioned above and also the address latch used by <a href="#Scroll_.28.242005.29_.3E.3E_write_x2">PPUSCROLL</a> and <a href="#Address_.28.242006.29_.3E.3E_write_x2">PPUADDR</a>. It does not clear the sprite 0 hit or overflow bit.
</li><li> When the sprite 0 hit flag is set on a frame, it will not be 
cleared until the vertical blank has ended on the next frame.  If 
attempting to use this flag for raster timing, it is important to ensure
 that the sprite 0 hit check happens outside of vertical blank, 
otherwise the CPU will "leak" through and the check will fail.  The 
easiest way to do this is to place an earlier check for D6 = 0, which 
will wait for the pre-render scanline to begin.
</li><li> If using sprite 0 hit to make a bottom scroll bar below a 
vertically scrolling or freely scrolling playfield, be careful to ensure
 that the tile in the playfield behind sprite 0 is opaque.
</li><li> Sprite 0 hit is not detected at x=255, nor is it detected at 
x=0 through 7 if the background or sprites are hidden in this area.
</li><li> <a href="http://wiki.nesdev.com/w/images/d/d1/Ntsc_timing.png" class="internal" title="Ntsc timing.png">This timing diagram</a> might clarify the timing of setting and clearing the flags (<a href="http://wiki.nesdev.com/w/images/4/4f/Ppu.svg" class="internal" title="Ppu.svg">source Inkscape SVG file</a>).
</li><li> Some <a href="http://wiki.nesdev.com/w/index.php/Vs._System" title="Vs. System">Vs. System</a> PPUs return a constant value in D4-D0 that the game checks.
</li><li> <b>Caution:</b> Reading PPUSTATUS at the exact start of 
vertical blank will return a 0 in D7 but clear the latch anyway, causing
 the program to miss frames. See <a href="http://wiki.nesdev.com/w/index.php/NMI" title="NMI">NMI</a> for details.
</li></ul>
<h3> <span class="mw-headline" id="OAM_address_.28.242003.29_.3E_write"> OAM address ($2003) &gt; write </span></h3>
<p>Is often referred as OAMADDR.
</p><p>Write the address of <a href="http://wiki.nesdev.com/w/index.php/PPU_OAM" title="PPU OAM">OAM</a>
 you want to access here.  Most games just write $00 here and then use 
OAM_DMA ($4014). (DMA is implemented in the 2A03/7 chip and works by 
repeatedly writing $2004.) 
</p>
<h4> <span class="mw-headline" id="Obscure_details_of_OAMADDR"> Obscure details of OAMADDR </span></h4>
<p>OAMADDR is set to 0 during each of ticks 257-320 (the sprite tile loading interval) of the pre-render and visible scanlines.
</p><p>The value of OAMADDR when sprite evaluation starts at tick 65 of 
the visible scanlines will determine where in OAM sprite evaluation 
starts, and hence which sprite gets treated as sprite 0. The first OAM 
entry to be checked during sprite evaluation is the one starting at 
OAM[OAMADDR]. If OAMADDR is unaligned and does not point to the y 
position (first byte) of an OAM entry, then whatever it points to (tile 
index, attribute, or x coordinate) will be reinterpreted as a y 
position, and the following bytes will be similarly reinterpreted. No 
more sprites will be found once the end of OAM is reached, effectively 
hiding any sprites before OAM[OAMADDR].
</p><p>Other oddities have been observed to occur when manually changing
 OAMADDR (as opposed to allowing it to auto-increment on writes to the 
data port), possibly related to the fact that OAM is made of dynamic 
memory which can decay into an "indeterminate" state (where bits are 
neither set nor clear) such that they could potentially inherit the 
state of other bits if OAMADDR is changed during the wrong clock phase. 
Whatever the actual glitchy behavior is, the Sachen game "Huge Insect" 
seems to rely on it.
</p><p>On the 2C02, <a rel="nofollow" class="external text" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=10189">writes to OAMADDR seem to reliably corrupt OAM</a>.
 This can then be worked around by writing all 256 bytes of OAM. It is 
also the case that if OAMADDR is not less than eight when rendering 
starts, the eight bytes starting at <tt>OAMADDR &amp; 0xF8</tt> are copied to the first eight bytes of OAM; it seems likely that this is related.
</p>
<h3> <span class="mw-headline" id="OAM_data_.28.242004.29_.3C.3E_read.2Fwrite"> OAM data ($2004) &lt;&gt; read/write </span></h3>
<p>OAM data port, often referred as OAMDATA.
</p><p>Write OAM data here. Writes will increment <a href="#OAM_address_.28.242003.29_.3E_write">OAMADDR</a> after the write; reads during vertical or forced blanking return the value from OAM at that address but do not increment.
</p><p>Most games access this register through $4014 instead. Reading 
OAMDATA while the PPU is rendering will expose internal OAM accesses 
during sprite evaluation and loading; Micro Machines does this.
</p><p>Writes to OAMDATA during rendering (on the pre-render line and 
the visible lines 0-239, provided either sprite or background rendering 
is enabled) do not modify values in OAM, but do perform a glitchy 
increment of OAMADDR, bumping only the high 6 bits (i.e., it bumps the <i>[n]</i> value in <a href="http://wiki.nesdev.com/w/index.php/PPU_sprite_evaluation" title="PPU sprite evaluation">PPU sprite evaluation</a>
 - it's plausible that it could bump the low bits instead depending on 
the current status of sprite evaluation). This extends to DMA transfers 
via $4014, since that uses writes to $2004. For emulation purposes, it 
is probably best to completely ignore writes during rendering.
</p><p>Historically, it's been reported that reading from this register <a rel="nofollow" class="external text" href="http://forums.nesdev.com/viewtopic.php?f=2&amp;t=6424">isn't reliable</a>, however, more recent evidence seems to suggest that this is solely due to corruption by OAMADDR writes.
</p>
<h3> <span class="mw-headline" id="Scroll_.28.242005.29_.3E.3E_write_x2"> Scroll ($2005) &gt;&gt; write x2 </span></h3>
<p>Is often referred as PPUSCROLL.
</p><p>This register is used to change the <a href="http://wiki.nesdev.com/w/index.php/PPU_scrolling" title="PPU scrolling">scroll position</a>, that is, to tell the PPU which pixel of the nametable selected through <a href="#Controller_.28.242000.29_.3E_write">PPUCTRL</a>
 should be at the top left corner of the rendered screen. Typically, 
this register is written to during vertical blanking, so that the next 
frame starts rendering from the desired location, but it can also be 
modified during rendering in order to split the screen. Changes made to 
the vertical scroll during rendering will only take effect on the next 
frame.
</p><p>After reading <a href="#Status_.28.242002.29_.3C_read">PPUSTATUS</a> to reset the address latch, write the horizontal and vertical scroll offsets here just before turning on the screen:
</p>
<pre> bit PPUSTATUS
&nbsp;; possibly other code goes here
 lda cam_position_x
 sta PPUSCROLL
 lda cam_position_y
 sta PPUSCROLL
</pre>
<p>Horizontal offsets range from 0 to 255. "Normal" vertical offsets 
range from 0 to 239, while values of 240 to 255 are treated as -16 
through -1 in a way, but tile data is incorrectly fetched from the 
attribute table.
</p><p>By changing the values here across several frames and writing 
tiles to newly revealed areas of the nametables, one can achieve the 
effect of a camera panning over a large background.
</p>
<h3> <span class="mw-headline" id="Address_.28.242006.29_.3E.3E_write_x2"> Address ($2006) &gt;&gt; write x2 </span></h3>
<p>Is often referred as PPUADDR.
</p><p>Because the CPU and the PPU are on separate buses, neither has direct access to the other's memory.
The CPU writes to VRAM through a pair of registers on the PPU.
First it loads an address into PPUADDR, and then it writes repeatedly to PPUDATA to fill VRAM.
</p><p>After reading <a href="#Status_.28.242002.29_.3C_read">PPUSTATUS</a> to reset the address latch, write the 16-bit address of VRAM you want to access here, upper byte first.
For example, to set the VRAM address to $2108:
</p>
<pre>  lda #$21
  sta PPUADDR
  lda #$08
  sta PPUADDR
</pre>
<p>Valid addresses are $0000-$3FFF; higher addresses will be <a href="http://wiki.nesdev.com/w/index.php/Mirroring" title="Mirroring">mirrored</a> down.
</p>
<h4> <span class="mw-headline" id="note"> note </span></h4>
<p>Access to <a href="#Scroll_.28.242005.29_.3E.3E_write_x2">PPUSCROLL</a>
 and PPUADDR during screen refresh produces interesting raster effects; 
the starting position of each scanline can be set to any pixel position 
in nametable memory. For more information, see <a href="http://wiki.nesdev.com/w/index.php/The_skinny_on_NES_scrolling" title="The skinny on NES scrolling">The skinny on NES scrolling</a> and <a rel="nofollow" class="external text" href="http://forums.nesdev.com/viewtopic.php?p=64111#p64111">tokumaru's sample code on the BBS</a>.
</p><p><b> Editor's note:</b> Last comment about external page should be re-directed to the getting started section instead.
</p>
<h3> <span class="mw-headline" id="Data_.28.242007.29_.3C.3E_read.2Fwrite"> Data ($2007) &lt;&gt; read/write </span></h3>
<p>Is often referred as PPUDATA.
</p><p>VRAM read/write data register. After access, the video memory address will increment by an amount determined by $2000:2.
</p><p>When the screen is turned off by disabling the background/sprite rendering flag with the <a href="#Mask_.28.242001.29_.3E.3E_write">PPUMASK</a>
 or during vertical blank, you can read or write data from VRAM through 
this port. Since accessing this register increments the VRAM address, it
 should not be accessed outside vertical or forced blanking because it 
will cause graphical glitches, and if writing, write to an unpredictable
 address in VRAM. However, two games are known to <a href="http://wiki.nesdev.com/w/index.php/Reading_2007_during_rendering" title="Reading 2007 during rendering">read from PPUDATA during rendering</a>: see <a href="http://wiki.nesdev.com/w/index.php/Tricky-to-emulate_games" title="Tricky-to-emulate games">Tricky-to-emulate games</a>.
</p><p>VRAM reading and writing shares the same internal address 
register that rendering uses. So after loading data into video memory, 
the program should reload the scroll position afterward with PPUSCROLL 
writes in order to avoid wrong scrolling.
</p>
<h4> <span class="mw-headline" id="The_PPUDATA_read_buffer_.28post-fetch.29"> The PPUDATA read buffer (post-fetch) </span></h4>
<p>When reading while the VRAM address is in the range 0-$3EFF (i.e., 
before the palettes), the read will return the contents of an internal 
read buffer. This internal buffer is updated <b>only</b> when reading 
PPUDATA, and so is preserved across frames. After the CPU reads and gets
 the contents of the internal buffer, the PPU will immediately update 
the internal buffer with the byte at the current VRAM address. Thus, 
after setting the VRAM address, one should first read this register and 
discard the result.
</p><p>Reading palette data from $3F00-$3FFF works differently. The 
palette data is placed immediately on the data bus, and hence no dummy 
read is required. Reading the palettes still updates the internal buffer
 though, but the data placed in it is the mirrored nametable data that 
would appear "underneath" the palette. (Checking the <a href="http://wiki.nesdev.com/w/index.php/PPU_memory_map" title="PPU memory map">PPU memory map</a> should make this clearer.)
</p>
<!-- 
NewPP limit report
Preprocessor visited node count: 60/1000000
Preprocessor generated node count: 70/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key nesdev_wiki-mw1_:pcache:idhash:11-0!*!0!!en!*!* and timestamp 20140411001335 -->
</div><div class="printfooter">
Retrieved from "<a href="http://wiki.nesdev.com/w/index.php?title=PPU_registers&amp;oldid=7219">http://wiki.nesdev.com/w/index.php?title=PPU_registers&amp;oldid=7219</a>"</div>
		<div id="catlinks" class="catlinks catlinks-allhidden"></div>		<!-- end content -->
				<div class="visualClear"></div>
	</div>
</div></div>
<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
				<li id="ca-nstab-main" class="selected"><a href="http://wiki.nesdev.com/w/index.php/PPU_registers" primary="1" context="subject" title="View the content page [alt-shift-c]" accesskey="c">Page</a></li>
				<li id="ca-talk"><a href="http://wiki.nesdev.com/w/index.php/Talk:PPU_registers" primary="1" context="talk" title="Discussion about the content page [alt-shift-t]" accesskey="t">Discussion</a></li>
				<li id="ca-viewsource"><a href="http://wiki.nesdev.com/w/index.php?title=PPU_registers&amp;action=edit" primary="1" title="This page is protected.
You can view its source [alt-shift-e]" accesskey="e">View source</a></li>
				<li id="ca-history"><a href="http://wiki.nesdev.com/w/index.php?title=PPU_registers&amp;action=history" rel="archives" title="Past revisions of this page [alt-shift-h]" accesskey="h">History</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-createaccount"><a href="http://wiki.nesdev.com/w/index.php?title=Special:UserLogin&amp;returnto=PPU+registers&amp;type=signup">Create account</a></li>
				<li id="pt-login"><a href="http://wiki.nesdev.com/w/index.php?title=Special:UserLogin&amp;returnto=PPU+registers" title="You are encouraged to log in; however, it is not mandatory [alt-shift-o]" accesskey="o">Log in</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
<a href="http://wiki.nesdev.com/w/index.php/Nesdev_Wiki" style="background-image: url(/w/skins/common/images/NESdevWikiLogo7.png);" title="Visit the main page"></a>
	</div>
	<div class="generated-sidebar portlet" id="p-navigation">
		<h5>Navigation</h5>
		<div class="pBody">
			<ul>
				<li id="n-Nesdev-main-page"><a href="http://wiki.nesdev.com/w/index.php/Nesdev">Nesdev main page</a></li>
				<li id="n-Wiki-main-page"><a href="http://wiki.nesdev.com/w/index.php/Nesdev_Wiki">Wiki main page</a></li>
				<li id="n-NES-reference-guide"><a href="http://wiki.nesdev.com/w/index.php/NES_reference_guide">NES reference guide</a></li>
				<li id="n-Programming-guide"><a href="http://wiki.nesdev.com/w/index.php/Programming_guide">Programming guide</a></li>
				<li id="n-Projects"><a href="http://wiki.nesdev.com/w/index.php/Projects">Projects</a></li>
				<li id="n-Offline-HTML-version"><a href="http://wiki.nesdev.com/w/nesdevwiki_2014-03-13.zip" rel="nofollow">Offline HTML version</a></li>
				<li id="n-NESdev-BBS"><a href="http://forums.nesdev.com/" rel="nofollow">NESdev BBS</a></li>
				<li id="n-.23NESdev"><a href="http://wiki.nesdev.com/w/index.php/NESdev_IRC_channel">#NESdev</a></li>
				<li id="n-recentchanges"><a href="http://wiki.nesdev.com/w/index.php/Special:RecentChanges" title="A list of recent changes in the wiki [alt-shift-r]" accesskey="r">Recent changes</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/w/index.php" id="searchform">
				<input name="title" value="Special:Search" type="hidden">
				<input placeholder="Search" autocomplete="off" name="search" title="Search Nesdev wiki [alt-shift-f]" accesskey="f" id="searchInput" type="search">
				<input name="go" value="Go" title="Go to a page with this exact name if exists" id="searchGoButton" class="searchButton" type="submit">&nbsp;
				<input name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton" type="submit">
			</form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="http://wiki.nesdev.com/w/index.php/Special:WhatLinksHere/PPU_registers" title="A list of all wiki pages that link here [alt-shift-j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="http://wiki.nesdev.com/w/index.php/Special:RecentChangesLinked/PPU_registers" title="Recent changes in pages linked from this page [alt-shift-k]" accesskey="k">Related changes</a></li>
				<li id="t-specialpages"><a href="http://wiki.nesdev.com/w/index.php/Special:SpecialPages" title="A list of all special pages [alt-shift-q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="http://wiki.nesdev.com/w/index.php?title=PPU_registers&amp;printable=yes" rel="alternate" title="Printable version of this page [alt-shift-p]" accesskey="p">Printable version</a></li>
				<li id="t-permalink"><a href="http://wiki.nesdev.com/w/index.php?title=PPU_registers&amp;oldid=7219" title="Permanent link to this revision of the page">Permanent link</a></li>
			</ul>
		</div>
	</div>
</div><!-- end of the left (by default at least) column -->
<div class="visualClear"></div>
<div id="footer">
	<div id="f-poweredbyico">
		<a href="http://www.mediawiki.org/"><img src="PPU%20registers%20-%20Nesdev%20wiki_files/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" height="31" width="88"></a>
	</div>
	<ul id="f-list">
		<li id="lastmod"> This page was last modified on 13 August 2013, at 10:26.</li>
		<li id="viewcount">This page has been accessed 32,995 times.</li>
		<li id="privacy"><a href="http://wiki.nesdev.com/w/index.php/Nesdev_wiki:Privacy_policy" title="Nesdev wiki:Privacy policy">Privacy policy</a></li>
		<li id="about"><a href="http://wiki.nesdev.com/w/index.php/Nesdev_wiki:About" title="Nesdev wiki:About">About Nesdev wiki</a></li>
		<li id="disclaimer"><a href="http://wiki.nesdev.com/w/index.php/Nesdev_wiki:General_disclaimer" title="Nesdev wiki:General disclaimer">Disclaimers</a></li>
	</ul>
</div>
</div>
<script>if(window.mw){
mw.loader.state({"site":"loading","user":"missing","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.user","mediawiki.page.ready","mediawiki.searchSuggest"], null, true);
}</script><script type="text/javascript" src="PPU%20registers%20-%20Nesdev%20wiki_files/load_002.php"></script>
<script src="PPU%20registers%20-%20Nesdev%20wiki_files/load.php"></script>
<!-- Served in 0.132 secs. --><div class="suggestions" style="display: none; font-size: 11.4667px;"><div class="suggestions-results"></div><div class="suggestions-special"></div></div></body></html>